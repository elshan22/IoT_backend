# Generated by Django 4.1.1 on 2022-09-30 11:35

import account.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=60, unique=True, verbose_name='email')),
                ('user_name', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=150)),
                ('password', models.CharField(max_length=30)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='last login')),
                ('role', models.CharField(choices=[('M', 'Manager'), ('S', 'System'), ('C', 'Customer')], default='C', max_length=1)),
                ('about', models.TextField(blank=True, max_length=500, verbose_name='about')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FanCoil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valv', models.BooleanField(blank=True, null=True)),
                ('valvstate', models.BooleanField(blank=True, null=True)),
                ('Temperature', models.FloatField(blank=True, null=True)),
                ('LastTime', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Floor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=account.models.upload_to, verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='MatFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('File', models.FileField(blank=True, null=True, upload_to=account.models.upload_to, verbose_name='File')),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ErrorId', models.IntegerField(blank=True, null=True)),
                ('MacAddress', models.CharField(blank=True, max_length=100, null=True)),
                ('SetPointTemperature', models.FloatField(blank=True, null=True)),
                ('permissions', models.BooleanField(blank=True, null=True)),
                ('status', models.BooleanField(blank=True, null=True)),
                ('mode', models.CharField(blank=True, max_length=500, null=True)),
                ('name', models.CharField(blank=True, max_length=500, null=True)),
                ('LastTime', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Security',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=100)),
                ('Value', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SecurityStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=100)),
                ('Value', models.BooleanField()),
                ('DateTime', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='switch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateTime', models.DateTimeField(auto_now_add=True)),
                ('Action', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NodeStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateTime', models.DateTimeField(blank=True, null=True)),
                ('Presence', models.IntegerField(blank=True, null=True)),
                ('ErrorId', models.IntegerField(blank=True, null=True)),
                ('FanCoilTemperature', models.FloatField(blank=True, null=True)),
                ('HomeTemperature', models.FloatField(blank=True, null=True)),
                ('status', models.BooleanField(blank=True, null=True)),
                ('faucetState', models.CharField(blank=True, max_length=100, null=True)),
                ('SetPointTemperature', models.FloatField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=500, null=True)),
                ('humidity', models.FloatField(blank=True, null=True)),
                ('valveState1', models.BooleanField(blank=True, null=True)),
                ('valveState2', models.BooleanField(blank=True, null=True)),
                ('FanCoil1', models.FloatField(blank=True, null=True)),
                ('FanCoil2', models.FloatField(blank=True, null=True)),
                ('light', models.FloatField(blank=True, null=True)),
                ('analog1', models.FloatField(blank=True, null=True)),
                ('analog2', models.FloatField(blank=True, null=True)),
                ('fanState1', models.BooleanField(blank=True, null=True)),
                ('fanState2', models.BooleanField(blank=True, null=True)),
                ('LastTime', models.DateTimeField(blank=True, null=True)),
                ('Node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.node')),
            ],
        ),
        migrations.CreateModel(
            name='Neighbor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('RSSI', models.FloatField(blank=True, null=True)),
                ('Node1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Neighbor1', to='account.node')),
                ('Node2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.node')),
            ],
        ),
        migrations.CreateModel(
            name='FanCoilStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valv', models.BooleanField(blank=True, null=True)),
                ('valvstate', models.BooleanField(blank=True, null=True)),
                ('Temperature', models.FloatField(blank=True, null=True)),
                ('FanCoilId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.fancoil')),
            ],
        ),
        migrations.AddField(
            model_name='fancoil',
            name='Node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.node'),
        ),
        migrations.CreateModel(
            name='Allocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('StartDate', models.DateField(blank=True, null=True)),
                ('EndDate', models.DateTimeField(blank=True, null=True)),
                ('NodeId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.node')),
                ('userId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
